---
import Image from 'astro/components/Image.astro';
import temperature from '../../../public/temperature.png';
import RenderTemperatureExample from '../RenderTemperatureExample/RenderTemperatureExample.astro';
import Divider from '../Divider/Divider.astro';
import genericVertexShader from '../RenderTemperatureExample/shaders/GenericVertexShader.vert.glsl';
import renderRawTemperatureData from '../RenderTemperatureExample/shaders/RenderRawTemperatureData.frag.glsl';
import renderTemperatureDataWithColorFromTexture from '../RenderTemperatureExample/shaders/RenderTemperatureDataWithColorFromTexture.frag.glsl';

import { INITIAL_TEMPERATURE_INDEX } from '../../helpers/constants';
import { Code } from 'astro:components';
---

<section class="temperature-section">
  <h1 class="temperature-header">Temperature</h1>
  <p>
    This section demonstrates how we use shaders to visualize temperature data. The data is fetched from a tile server
    and rendered using WebGL shaders.
  </p>
  <Divider />

  <h2>Temperature Data</h2>
  <div class="temperature-example">
    <p>
      Temperature data is retrieved from a tile server that provides XYZ tiles containing temperature values. For
      simplicity, we use static images for both the temperature data and the map background. The image below consists of
      multiple tiles stitched together to create a larger image. In the next example, we will use WebGL to render this
      data alongside our background map.
    </p>

    <Image id="temperature-data-image" src={temperature} alt="Temperature data visualization" loading="eager" />

    <Divider />

    <h2>Rendering Raw Temperature Data with WebGL</h2>
    <p>
      Setting up WebGL requires some boilerplate code, which is omitted in these simplified examples. If you are
      unfamiliar with WebGL, we recommend visiting
      <a href="https://webglfundamentals.org/">WebGL Fundamentals</a> for an introduction. Once a canvas element is created
      and the WebGL context is set up, we can begin writing shaders.
    </p>

    <h3>Vertex Shader</h3>
    <Code lang="glsl" code={genericVertexShader.replaceAll('///', '//')} wrap={true} />
    <p>A simple vertex shader that provides the texture coordinates to the fragment shader.</p>

    <h3>Fragment Shader</h3>
    <Code lang="glsl" code={renderRawTemperatureData.replaceAll('///', '//')} wrap={true} />
    <p>
      The fragment shader samples texture coordinates (<code>vTexCoord</code>) to determine the color representation in
      both the temperature data and the background map. To blend these colors, we multiply them together.
    </p>

    <h3>Output</h3>
    <p>The result is drawn onto our canvas element.</p>
    <canvas id="temperature-canvas" data-initial-index={INITIAL_TEMPERATURE_INDEX + 1}></canvas>

    <h2>Applying a Custom Color Gradient</h2>
    <p>
      The raw temperature data is not easily readable, as it only contains temperature values stored in the R channel of
      the image. To improve readability, we apply a custom color gradient using the fragment shader. The vertex shader
      remains unchanged.
    </p>

    <p id="temperature-example-text">Applying a custom color gradient.</p>

    <h3>Fragment Shader Modifications</h3>
    <p>
      Instead of displaying the raw data, we map the temperature values to a color gradient. We achieve this by adding:
    </p>
    <ul>
      <li><Code lang="glsl" code="uniform sampler2D uColorGradientTexture" inline={true} /></li>
      <li>Extracting the R value from <code>uDataTexture</code>, which contains the temperature information.</li>
    </ul>

    <Code lang="glsl" code={renderTemperatureDataWithColorFromTexture.replaceAll('///', '//')} wrap={true} />

    <h3>Output</h3>
    <p>After modifying the fragment shader, the temperature data is now visualized using our custom color gradient.</p>
    <canvas id="temperature-example-canvas" data-initial-index={INITIAL_TEMPERATURE_INDEX + 4}></canvas>
    <Divider />
    <RenderTemperatureExample />
  </div>
</section>

<style is:global>
  pre {
    padding: 16px;
  }
</style>
<style lang="scss">
  .temperature-section {
    padding-bottom: 30px;
  }
  .temperature-example {
    display: grid;
    text-align: start;

    img,
    canvas {
      border: 1px solid lightgrey;
      margin: 8px 0;
      justify-self: center;
    }
    canvas {
      transform: scaleX(-1) rotate(180deg);
    }
  }

  .temperature-example-item {
    display: grid;
    grid-template-rows: 1fr;
    justify-items: center;
    gap: 16px;
  }
</style>

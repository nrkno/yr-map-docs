---
import Image from 'astro/components/Image.astro';
import { Code } from 'astro:components';
import wind from '../../../public/wind.png';
import { INITIAL_WIND_INDEX } from '../../helpers/constants';
import RenderWindExample from '../RenderWindExample/RenderWindExample.astro';
import Divider from '../Divider/Divider.astro';
import genericVertexShader from '../RenderWindExample/shaders/GenericVertexShader.vert.glsl';
import renderRawWindData from '../RenderWindExample/shaders/RenderRawWindData.frag.glsl';
import renderWindDataByWindSpeed from '../RenderWindExample/shaders/RenderWindDataByWindSpeed.frag.glsl';
---

<section class="wind-section">
  <h1>Wind</h1>
  <p>
    These examples are simplified, using only static images created from tiles for some given bounds. We are not
    implementing it in a map context; we are simply showing examples of how to read and use the data using WebGL
    shaders.
  </p>
  <Divider />
  <h2>Wind data</h2>
  <div class="wind-example">
    <p>
      Wind data is fetched from a tile server that contains XYZ tiles with wind data. The data is then used to create a
      wind map using WebGL. To simplify the example, we are using a static image of the wind data and a static image of
      the map background. The image below consists of four tiles of wind data, stitched together to create a larger
      image. In the next example, we will use WebGL to render this data together with our background map.
    </p>

    <Image id="wind-data-image" src={wind} alt="Raw wind data from tile server" loading="eager" />

    <Divider />
    <h2>Render raw wind data with WebGL</h2>
    <p>
      Setting up WebGL demands some boilerplate code, which we will not provide in these simplified examples. If you are
      unfamiliar with WebGL, we recommend visiting <a href="https://webglfundamentals.org/">WebGL Fundamentals</a> to get
      a grasp of the basics. After creating a canvas element and setting up the WebGL context, we can start creating our
      shaders.
    </p>

    <h3>Vertex shader</h3>
    <Code lang="glsl" code={genericVertexShader.replaceAll('///', '//')} wrap={true} />
    <p>A simple vertex shader whose sole purpose is to provide our fragment shader with the texture coordinates.</p>
    <h3>Fragment shader</h3>
    <Code lang="glsl" code={renderRawWindData.replaceAll('///', '//')} wrap={true} />
    <p>
      The fragment shader gets the texture coordinates (vTexCoord) to look up which color this coordinate represents in
      both the wind data and our background map. As a simple way of blending these colors, we multiply them by each
      other.
    </p>
    <h3>Output</h3>
    <p>This is the result that is drawn to our canvas element.</p>
    <canvas id="wind-canvas" data-initial-index={INITIAL_WIND_INDEX + 1}></canvas>

    <h2>Applying our own color gradient</h2>
    <p>
      The raw data is not easily readable for humans, as it only contains dimensions for a directional vector stored in
      the R and G channels of the image. To make it more readable, we need to make some changes in the fragment shader.
      The vertex shader will remain the same.
    </p>
    <p id="wind-example-text">But first, we can create the gradient we want to use.</p>
    <p>We don't need to render this gradient to the screen; it is simply done to visualize the example.</p>

    <h3>Fragment shader changes</h3>
    <p>
      To read the color from the gradient instead of just using the raw data, we have added <Code
        lang="glsl"
        code="uniform sampler2D uColorGradientTexture"
        inline={true}
      />, <Code lang="glsl" code="uniform float uMaxSpeed" inline={true} />, and the function <Code
        lang="glsl"
        code="vec2 getDirectionFromWindData(vec4 windData)"
        inline={true}
      /> to help us achieve this.
    </p>

    <p>
      As briefly mentioned, the wind data only contains a directional vector, stored in the R and G channels of the
      image. So in this example, we first get the direction of the wind, then calculate the length of the vector to get
      the speed. We then normalize the speed and use it as a lookup in our color gradient. The color gradient moves from
      left to right, so we send the normalized speed as the x value.
    </p>
    <Code lang="glsl" code={renderWindDataByWindSpeed.replaceAll('///', '//')} wrap={true} />

    <h3>Output</h3>
    <p>
      After making these changes to the fragment shader, we can see the color gradient has been rendered in the end
      result.
    </p>
    <canvas id="wind-example-canvas" data-initial-index={INITIAL_WIND_INDEX + 2}></canvas>
    <Divider />

    <!-- RenderWindExample contains the js we need to set up WebGL, and the shaders needed for each example -->
    <RenderWindExample />

    <style is:global>
      pre {
        padding: 16px;
      }
    </style>
    <style lang="scss">
      .wind-section {
        padding-bottom: 30px;
      }
      .wind-example {
        display: grid;
        text-align: start;

        img,
        canvas {
          border: 1px solid lightgray;
          margin: 8px 0;
          justify-self: center;
        }
      }

      .wind-example-item {
        display: grid;
        grid-template-rows: 1fr;
        justify-items: center;
        gap: 16px;
      }
    </style>
  </div>
</section>
